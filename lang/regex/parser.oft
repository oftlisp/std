;; Parses a regex's string version, or one of its components, to a CST. If the
;; regex is valid, returns a list whose first item is the symbol `ok`, whose
;; second item is the parse tree, and whose third item is the remainder of the
;; input string. If the regex is not valid, returns a cons whose head is the
;; symbol `err` and whose tail is the error (which may be nil).
;;
;; TODO: Once general monads are implemented, rewrite this to use the result
;; monad.
(module std/lang/regex/parser
  parse-cst-and-branch
  parse-cst-and-branches
  parse-cst-atom
  parse-cst-or-branch
  parse-cst-literal-char
  parse-cst-piece
  parse-cst-qualifier
  parse-cst-regex
  parse-cst-special-char)

(def special-chars (list "|" "+" "*" "?" "." "(" ")" "[" "]" "&" "^" "!" "\\"))

(defn parse-cst-literal-char (str)
  (if (empty? str)
    (err "Unexpected EOF")
    (let1 ch (head str)
      (if (contains? special-chars ch)
        (err (concat-strings "Unexpected character: `" ch "'"))
        (ok ch (tail str))))))

(defn parse-cst-special-char (str)
  (if (empty? str)
    (err "Unexpected EOF")
    (let1 ch (head str)
      (if (contains? special-chars ch)
        (ok ch (tail str))
        (err (concat-strings "Unexpected character: `" ch "'"))))))

(defn kleene (parser str)
  (defn helper (str accum)
    (if (empty? str)
      (ok (reverse accum) "")
      (let1 tmp (parser str)
        (if (err? tmp)
          (ok (reverse accum) str)
          (helper (caddr tmp) (cons (cadr tmp) accum))))))
  (helper str nil))

(defnrec
  (parse-cst-and-branch (str)
    (let1 fst (parse-cst-or-branch str)
      (if (err? fst)
        fst
        (let1 rst (kleene parse-cst-rest-or-branches (caddr fst))
          (ok (cons (cadr fst) (cadr rst)) (caddr rst))))))
  (parse-cst-and-branches (str)
    (let1 fst (parse-cst-and-branch str)
      (if (err? fst)
        fst
        (let1 rst (kleene parse-cst-rest-and-branches (caddr fst))
          (ok (cons (cadr fst) (cadr rst)) (caddr rst))))))
  (parse-cst-atom (str)
    (if (empty? str)
      (err "Unexpected EOF")
      (case (head str)
        "."  (ok 'any-char (tail str))
        "\\" (parse-cst-special-char (tail str))
        "("  (parse-cst-paren-regex (tail str))
        "["  (parse-cst-char-set (tail str))
             (parse-cst-literal-char str))))
  (parse-cst-char-set (str)
    (todo 'parse-cst-char-set))
  (parse-cst-or-branch (str)
    (def fst (parse-cst-piece str))
    (if (err? fst)
      (ok nil str)
      (let1 rst (kleene parse-cst-piece (caddr fst))
        (ok (cons (cadr fst) (cadr rst)) (caddr rst)))))
  (parse-cst-paren-regex (str)
    (def re (parse-cst-regex str))
    (if (err? re)
      re
      (let (str (caddr re))
           (re (cadr re))
        (if (empty? str)
          (err "Unexpected EOF")
          (let1 ch (head str)
            (if (eq ch ")")
              (ok re (tail str))
              (err (concat-strings "Unexpected character: `" ch "'"))))))))
  (parse-cst-piece (str)
    (def atom (parse-cst-atom str))
    (if (err? atom)
      atom
      (let1 qualifier (parse-cst-qualifier (caddr atom))
        (if (err? qualifier)
          (ok (list (cadr atom)) (caddr atom))
          (ok (cons (cadr atom) (cadr qualifier)) (caddr qualifier))))))
  (parse-cst-qualifier (str)
    (if (empty? str)
      (err "Unexpected EOF")
      (let (ch (head str))
           (tl (tail str))
        (case ch
          "+" (ok '+ tl)
          "*" (ok '* tl)
          "?" (ok '? tl)
              (err (concat-strings "Unexpected character: `" ch "'"))))))
  (parse-cst-regex (str)
    (cond
      (empty? str)
        (let1 re (parse-cst-and-branches str)
          (if (err? re)
            re
            (ok (list 'just (cadr re)) (caddr re))))
      (eq (head str) "!")
        (let1 re (parse-cst-and-branches (tail str))
          (if (err? re)
            re
            (ok (list 'not (cadr re)) (caddr re))))
      else
        (let1 re (parse-cst-and-branches str)
          (if (err? re)
            re
            (ok (list 'just (cadr re)) (caddr re))))))
  (parse-cst-rest-and-branches (str)
    (cond
      (empty? str)
        (err "Unexpected EOF")
      (eq (head str) "&")
        (parse-cst-and-branch (tail str))
      else
        (err (concat-strings "Unexpected character: `" (head str) "'"))))
  (parse-cst-rest-or-branches (str)
    (cond
      (empty? str)
        (err "Unexpected EOF")
      (eq (head str) "|")
        (parse-cst-or-branch (tail str))
      else
        (err (concat-strings "Unexpected character: `" (head str) "'")))))
