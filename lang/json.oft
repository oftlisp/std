(module std/lang/json
  json-parse)

(import std/fp/monad
  >>=)
(import std/parsing/peg
  combinator-*
  combinator-+
  combinator-?
  defsyntax-peg)

(defsyntax-peg json-cst-parse
  (root spacing value end-of-file)

  ; TODO: Support unicode whitespace?
  (spacing (* (charset " " "\n" "\r" "\t")))
  (end-of-file (not .))

  (value (choose string number object array literal))

  (object LBRACE RBRACE)
  (object LBRACE object-pair (* [COMMA object-pair]) RBRACE)
  (object-pair string COLON value)

  (array LBRACK RBRACK)
  (array LBRACK value (* [COMMA value]) RBRACK)

  (string "\"" (* char) "\"")
  (char "\\" (charset "\"" "\\" "/" "b" "f" "n" "r" "t"))
  (char "\\u" hex-digit hex-digit hex-digit hex-digit)
  (char (not "\\") .)
  (hex-digit (charset ("0" "9") ("a" "f") ("A" "F")))

  (number (? "-") int-part (? ["." (+ digit)]) exp-part)
  (int-part "0")
  (int-part (charset ("1" "9")) (* digit))
  (digit (charset ("0" "9")))
  (exp-part
    (charset "e" "E")
    (? (charset "+" "-"))
    (+ digit))

  (literal (choose TRUE FALSE NULL))

  (LBRACE "{" spacing)
  (RBRACE "}" spacing)
  (LBRACK "[" spacing)
  (RBRACK "]" spacing)
  (COLON ":" spacing)
  (COMMA "," spacing)

  (TRUE "true" spacing)
  (FALSE "false" spacing)
  (NULL "null" spacing))

(defn ast<-root (cst)
  (todo))

(defn json-parse (str)
  (>>= (json-cst-parse str) ast<-root))
