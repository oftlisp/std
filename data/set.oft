;; This module implements a set based on the Red-Black Tree presented in
;; Chris Okasaki's Purely Functional Data Structures, with the deletion
;; algorithm proposed by Matt Might.
(module std/data/set
  list<-set
  set
  set?
  set.contains?
  set.difference
  set.filter
  set.flat-map
  set.intersection
  set.union
  set<-list)

(import std/data/tree
  tree-contains?)

(defclass set
  (val eq?)
  (val lt?)
  (val tree)

  (ctor ((tree ()) (eq? ()) (lt? ()))
    (<- eq? (or-default eq))
    (<- lt? (or-default less))
    (list eq? lt? tree))

  (defn contains? (value)
    (tree-contains? value tree eq? lt?))

  (defn difference (... s)
    (todo "TODO: set.difference"))

  (defn filter (f)
    (todo "TODO: set.filter"))

  (defn flat-map (f)
    (todo "TODO: set.flat-map"))

  (defn intersection (... s)
    (todo "TODO: set.intersection"))

  (defn union (... s)
    (todo "TODO: set.union")))

(defn list<-set (s)
  (todo "TODO: list<-set"))

(defn set<-list (s)
  (todo "TODO: list<-set"))
