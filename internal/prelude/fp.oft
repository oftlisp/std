;; Functional programming primitives.
(module std/internal/prelude/fp
  .
  all
  any
  contains?
  defcurried
  enumerate
  filter
  flat-map
  flatten
  foldl
  foldr
  each
  group-by
  lookup
  lookup-all
  lookup-all-by
  lookup-by
  map
  reverse
  skip
  split-at
  sort
  sort-by
  take
  uniq
  unique
  zip)

(import std/internal/prelude/constants
  else
  nil)
(import std/internal/prelude/eq
  eq)
(import std/internal/prelude/fp/list
  list.all
  list.any
  list.enumerate
  list.filter
  list.flat-map
  list.foldl
  list.foldr
  list.each
  list.group-by
  list.lookup
  list.lookup-all
  list.lookup-all-by
  list.lookup-by
  list.map
  list.skip
  list.sort
  list.sort-by
  list.split-at
  list.take
  list.uniq
  list.zip)
(import std/internal/prelude/fp/vector
  vector.all
  vector.any
  vector.enumerate
  vector.filter
  vector.flat-map
  vector.foldl
  vector.foldr
  vector.each
  vector.group-by
  vector.lookup
  vector.lookup-all
  vector.lookup-all-by
  vector.lookup-by
  vector.map
  vector.reverse
  vector.skip
  vector.sort
  vector.sort-by
  vector.split-at
  vector.take
  vector.uniq
  vector.zip)
(import std/internal/prelude/logic
  or)
(import std/internal/prelude/objects/common-methods
  head
  tail)
(import std/internal/prelude/objects/methods
  object-get-method)
(import std/internal/prelude/strings
  string.split-at)
(import std/internal/prelude/util/macros
  case
  cond
  let1
  when)
(import std/internal/prelude/util/pseudoprims
  append
  last
  length
  list
  list.reverse)
(import std/internal/primitives
  append-strings
  apply
  bytes?
  bytes.reverse
  car
  cdr
  cons
  cons?
  debug-trace
  list<-vector
  nil?
  object-type
  object?
  panic
  string<-symbol
  string?
  string.reverse
  symbol<-string
  vector?)

;; Function composition.
(defn . (... l)
  (def funcs (list.reverse l))
  (defn loop (x l)
    (if (nil? l)
      x
      (loop ((car l) x) (cdr l))))
  (fn (x) (loop x funcs)))

(defmacro defcurried (name args body-car ... body-cdr)
  (when (nil? args)
    (panic "Cannot defcurried a function that takes no arguments"))

  (defn helper (args body)
    (cons 'fn
      (cons (list (car args))
        (if (nil? (cdr args))
          body
          (list (helper (cdr args) body))))))
  (list 'def name (helper args (cons body-car body-cdr))))

(defmacro deffpgeneric (name args)
  (def name-str (string<-symbol name))
  (def list-op (symbol<-string
    (append-strings "list." name-str)))
  (def vector-op (symbol<-string
    (append-strings "vector." name-str)))
  (list 'defn name args
    (list 'if (list 'vector? (car args))
      (cons vector-op args)
      (list 'if (list 'object? (car args))
        (list 'apply
          (list 'object-get-method (list 'object-type (car args)) name)
          (cons 'list args))
        (list 'if (list 'or (list 'nil? (car args)) (list 'cons? (car args)))
          (cons list-op args)
          (list 'panic
            (append-strings "Invalid arg to " name-str)
            (car args)))))))

(deffpgeneric all (l f))
(deffpgeneric any (l f))
(defn contains? (l x)
  (any l \(eq x $)))
(deffpgeneric each (l f))
(deffpgeneric enumerate (l))
(deffpgeneric filter (l f))
(deffpgeneric flat-map (l f))
(deffpgeneric foldl (xs f x))
(deffpgeneric foldr (xs f x))
(deffpgeneric group-by (l f))
(deffpgeneric lookup (xs x))
(deffpgeneric lookup-all (xs x))
(deffpgeneric lookup-all-by (xs f x))
(deffpgeneric lookup-by (xs f x))
(deffpgeneric map (l f))
(deffpgeneric skip (l n))
(deffpgeneric sort (l))
(deffpgeneric sort-by (l f))
(deffpgeneric take (l n))
(deffpgeneric uniq (l))
(defn unique (l) (uniq (sort l)))
(deffpgeneric zip (l r))

(defn flatten (... xs)
  (defn loop (x acc)
    (cond
      (nil? x)    acc
      (vector? x) (loop (list<-vector x) acc)
      (cons? x)   (loop (car x) (loop (cdr x) acc))
      else        (cons x acc)))
  (loop xs nil))

(defn reverse (l)
  (def f (if (object? l) (object-get-method (object-type l) 'reverse)
         (if (bytes? l)  bytes.reverse
         (if (string? l) string.reverse
         (if (vector? l) vector.reverse
                         list.reverse)))))
  (f l))

(defn split-at (l i)
  (def f (if (object? l) (object-get-method (object-type l) 'split-at)
         (if (string? l) string.split-at
         (if (vector? l) vector.split-at
                         list.split-at))))
  (f l i))
