(module std/internal/prelude/match
  match)

(import std/internal/prelude/print
  println)
(import std/internal/prelude/quasiquote
  quasiquote)
(import std/internal/prelude/util
  cadr
  cddr)
(import std/internal/prelude/util/macros
  todo)
(import std/internal/prelude/util/pseudoprims
  append
  list)
(import std/internal/primitives
  car
  cons
  gensym
  panic)

;; The pattern-matching macro.
;;
;; Usage:
;;
;;   MATCH = (match INPUT PATTERNS...)
;;   PATTERN = VAR
;;           | (quote SYM)
;;           | (quasiquote QQ-PAT)
;;           | (PATTERN...)
;;           | [PATTERN...]
;;           | PRIM
;;   QQ-PAT = (unquote VAR)
;;          | (unquote-splicing VAR)
;;          | (QQ-PAT...)
;;          | [QQ-PAT...]
;;          | PRIM
;;   VAR = _ | SYM
(defmacro match (input ... pats)
  ; Generates code to determine if the value stored in the variable
  ; `input-name` matches the pattern `pat`.
  (defn pattern-condition (input-name pat)
    (todo "pattern-condition"))

  ; Generates code that binds the variables for the pattern `pat` to the value
  ; stored in the variable `input-name`, then evaluates `expr`.
  (defn pattern-match (input-name pat expr)
    (todo "pattern-match"))

  (defn loop (input-name l)
    (def pat (car l))
    (cons (pattern-condition input-name pat)
      (cons (pattern-match input-name pat (cadr l))
        (loop (cddr l)))))

  (def input-name (gensym))
  `(progn
    (def ,input-name ,input)
    (cond ,input-name ,@(loop input-name pats))))
