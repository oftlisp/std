(module std/internal/prelude/util/macros
  ->
  ->>
  <-
  case
  compile-time-eval
  cond
  for-each
  let
  let1
  letrec
  todo
  unless
  when)

(import std/internal/prelude/constants
  nil)
(import std/internal/prelude/util/pseudoprims
  append
  concat
  init
  last
  length
  list)
(import std/internal/primitives
  =
  car
  cdr
  cons
  cons?
  debug
  gensym
  nil?
  panic)

;; The arrow macro of Clojure. An equivalent infix operator exists in Elixir,
;; and probably in other languages.
;;
;; # Example
;;
;; ```
;; (-> (get-list)
;;   (map 1+)
;;   (filter (fn (x) (< x 0))))
;;
;; ; is equivalent to
;;
;; (filter (map (get-list) 1+) (fn (x) (< x 0)))
;; ```
(defmacro -> (fst ... rest)
  (defn helper (x xs)
    (if (nil? xs) x
      (progn
        (def hd (car xs))
        (def tl (cdr xs))
        (def next (if (cons? hd)
          (cons (car hd) (cons x (cdr hd)))
          (list hd x)))
        (helper next tl))))
  (helper fst rest))

(defmacro ->> (fst ... rest)
  (defn helper (x xs)
    (if (nil? xs) x
      (progn
        (def hd (car xs))
        (def tl (cdr xs))
        (def next (if (cons? hd)
          (append hd (list x))
          (list hd x)))
        (helper next tl))))
  (helper fst rest))

;; Assigns `var` to the result of `(func var)`.
;;
;; # Example
;;
;; ```
;; (def x 0)
;; (<- x 1+)
;; (assert-eq x 1)
;; ```
(defmacro <- (var func)
  (list 'def var (list func var)))

;; Panics with the string "TODO".
(defmacro todo (... msg)
  (def msg (if (nil? msg)
    '("TODO")
    (cons "TODO: " msg)))
  (cons 'panic msg))

(defmacro case (value ... forms)
  (def name (gensym))
  (defn helper (forms)
    (if (cons? forms)
      (if (cons? (cdr forms))
        (list 'if
          (list 'eq (car forms) name)
          (car (cdr forms))
          (helper (cdr (cdr forms))))
        (car forms))
      ''()))
  (list 'progn
    (list 'def name value)
    (helper forms)))

;; TODO: This should probably be a builtin, rather than being a macro; the progn
;; could break things if used in a quote.
(defmacro compile-time-eval (form)
  (def macro-name (gensym))
  (list 'progn
    (list 'defmacro macro-name (list)
        form)
    (list macro-name)))

(defmacro cond (... forms)
  (defn helper (forms)
    (if (cons? forms)
      (if (cons? (cdr forms))
        (list 'if
          (car forms)
          (car (cdr forms))
          (helper (cdr (cdr forms))))
        (car forms))
      ''()))
  (helper forms))

(defmacro for-each (x-var xs-var ... body)
  (list 'each xs-var (cons 'fn (cons (list x-var) body))))

;; A let-expression. Of the form:
;;
;;   (let CLAUSES
;;        ...
;;      BODY-EXPR)
;;
;; where CLAUSES... represents one or more clauses of the form:
;;
;;   (VAR EXPR)
;;
;; and BODY-EXPR is a single expression.
(defmacro let (h ... t)
  (defn to-def (clause)
    (if (= (length clause) 2)
      (cons 'def clause)
      (panic "Invalid let clause")))
  (defn to-defs (clauses)
    (if (nil? clauses)
      nil
      (cons (to-def (car clauses))
        (to-defs (cdr clauses)))))

  (def l (cons h t))
  (append
    (list 'progn)
    (to-defs (init l))
    (list (last l))))

;; A let-expression with a single binding. Of the form:
;;
;;   (let1 (VAR EXPR)
;;     BODY-EXPRS...)
(defmacro let1 (clause ... body)
  (def var (car clause))
  (def expr (car (cdr clause)))
  (if (= (length clause) 2)
    (cons 'progn (cons (list 'def var expr) body))
    (panic "Invalid let1 clause")))

;; A recursive let-expression. Of the form:
;;
;;   (letrec CLAUSES
;;           ...
;;     BODY-EXPR)
;;
;; where CLAUSES... represents one or more clauses of the form:
;;
;;   (NAME ARGS EXPR...)
;;
;; and BODY-EXPR is a single expression.
(defmacro letrec (h ... t)
  (def l (cons h t))
  (list 'progn
    (cons 'defnrec (init l))
    (last l)))

(defmacro unless (c ... forms)
  (list 'if c ''() (cons 'progn forms)))

(defmacro when (c ... forms)
  (list 'if c (cons 'progn forms)))
