(module std/internal/prelude/objects/common-methods
  empty?
  head
  slice
  tail)

(import std/internal/prelude/constants
  else
  false
  true)
(import std/internal/prelude/util/macros
  cond
  todo)
(import std/internal/prelude/util/pseudoprims
  eq
  length)
(import std/internal/primitives
  =
  car
  cdr
  cons?
  nil?
  panic
  prim-eq
  string?
  string.scalar-head
  string.scalar-tail
  string.slice
  vector?
  vector.length
  vector.nth
  vector.slice)

(defn empty? (x)
  (cond
    (cons? x)   false
    (nil? x)    true
    (string? x) (eq x "")
    (vector? x) (= (length x) 0)
    else        (panic "Invalid type in call to empty?")))

(defn head (x)
  (cond
    (cons? x)   (car x)
    (nil? x)    (panic "Can't take head of nil")
    (string? x) (string.scalar-head x)
    (vector? x) (vector.nth x 0)
    else        (panic "Invalid type in call to head")))

(defn slice (x s e)
  (cond
    (cons? x)   (todo)
    (nil? x)    (todo)
    (string? x) (string.slice x s e)
    (vector? x) (vector.slice x s e)
    else        (panic "Invalid type in call to slice")))

(defn tail (x)
  (cond
    (cons? x)   (cdr x)
    (nil? x)    (panic "Can't take tail of nil")
    (string? x) (string.scalar-tail x)
    (vector? x) (vector.slice x 1 (vector.length x))
    else        (panic "Invalid type in call to tail")))
