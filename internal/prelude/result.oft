(module std/internal/prelude/result
  err
  err?
  ok
  ok?
  result.ap
  result.bind
  result.fmap
  result.pure)

(import std/internal/prelude/util
  shl?)
(import std/internal/prelude/util/macros
  case
  todo)
(import std/internal/prelude/util/pseudoprims
  length)
(import std/internal/primitives
  car
  cdr
  cons
  eq
  panic)

(defn err (msg)
  (cons 'err msg))

(defn err? (x) (shl? x 'err))

(defn ok (... vals)
  (case (length vals)
    0 'ok
    1 (cons 'ok (car vals))
      (cons 'ok vals)))

(defn ok? (x) (shl? x 'ok))

(defn result.ap (this f)
  (todo))

(defn result.fmap (this f)
  (if (err? this)
    this
    (ok (f (cdr this)))))

(defn result.bind (this f)
  (if (err? this)
    this
    (f (cdr this))))

(defn result.pure (x)
  (ok x))
