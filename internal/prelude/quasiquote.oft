(module std/internal/prelude/quasiquote
  quasiquote)

(import std/internal/prelude/constants
  else)
(import std/internal/prelude/fp/list
  list.map)
(import std/internal/prelude/util/pseudoprims
  list
  list?)
(import std/internal/prelude/util/macros
  cond)
(import std/internal/primitives
  car
  cdr
  cons
  cons?
  eq
  panic
  symbol?
  vector?)

(defmacro quasiquote (value)
  (defn helper (value)
    (if (cons? value)
      (cond
        (eq (car value) 'unquote)
          (list 'list (car (cdr value)))
        (eq (car value) 'unquote-splicing)
          (car (cdr value))
        else
          (list 'list (list 'quasiquote value)))
      (list 'list (list 'quote value))))
  (cond
    (vector? value) (panic "TODO quasiquote a vector")
    (list? value)   (cons 'append (list.map value helper))
                    (panic "TODO quasiquote value")))
