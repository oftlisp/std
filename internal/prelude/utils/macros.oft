(module std/internal/prelude/utils/macros
  ->
  <-
  cond
  todo
  unless
  when)

(import std/internal/prelude/utils/pseudoprims
  list)
(import std/internal/primitives
  car
  cdr
  cons
  cons?
  nil?
  panic)

;; The arrow macro of Clojure. An equivalent infix operator exists in Elixir,
;; and probably in other languages.
;;
;; # Example
;;
;; ```
;; (-> (get-list)
;;   (map 1+)
;;   (filter (fn (x) (< x 0))))
;;
;; ; is equivalent to
;;
;; (filter (map (get-list) 1+) (fn (x) (< x 0)))
;; ```
(defmacro -> (fst ... rest)
  (defn helper (x xs)
    (if (nil? xs) x
      (progn
        (def hd (car xs))
        (def tl (cdr xs))
        (def next (if (cons? hd)
          (cons (car hd) (cons x (cdr hd)))
          (list hd x)))
        (helper next tl))))
  (helper fst rest))

;; Assigns `var` to the result of `(func var)`.
;;
;; # Example
;;
;; ```
;; (def x 0)
;; (<- x 1+)
;; (assert-eq x 1)
;; ```
(defmacro <- (var func)
  (list 'def var (list func var)))

;; Panics with the string "TODO".
(defmacro todo ((msg ()))
  (def msg (if (nil? msg)
    "TODO"
    msg))
  (list 'panic msg))

(defmacro cond (... forms)
  (defn helper (forms)
    (if (cons? forms)
      (if (cons? (cdr forms))
        (list 'if
          (car forms)
          (car (cdr forms))
          (helper (cdr (cdr forms))))
        (car forms))
      ''()))
  (helper forms))

(defmacro unless (c ... forms)
  (list 'if c ''() (cons 'progn forms)))

(defmacro when (c ... forms)
  (list 'if c (cons 'progn forms)))
