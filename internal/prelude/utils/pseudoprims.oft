(module std/internal/prelude/utils/pseudoprims
  append
  id
  length
  list
  list?
  not
  reverse)

(import std/internal/prelude/constants
  false
  nil
  true)
(import std/internal/primitives
  +/2
  apply
  car
  cdr
  cons
  cons?
  nil?)

;; Reverses a list.
(defn reverse (l)
  (defn loop (acc l)
    (if (cons? l)
      (loop (cons (car l) acc) (cdr l))
      acc))
  (loop nil l))

;; Appends lists.
(defn append (... xs)
  (defn append/2 (x y)
    (defn helper (acc l)
      (if (cons? l)
        (helper (cons (car l) acc) (cdr l))
        acc))
    (helper y (reverse x)))
  (if (cons? xs)
    (append/2 (car xs) (apply append (cdr xs)))
    nil))

;; The identity function.
(defn id (x) x)

;; Returns the length of a list.
(defn length (l)
  (defn loop (l n)
    (if (nil? l)
      n
      (loop (cdr l) (+/2 n 1))))
  (loop l 0))

;; Constructs a list.
(defn list (... xs) xs)

;; Logical not.
(defn not (x)
  (if x false true))

;; Checks if a value is a list.
(defn list? (value)
  (if (cons? value)
    't
    (nil? value)))
