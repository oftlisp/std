(module std/internal/prelude/fp/vector
  vector.all
  vector.any
  vector.enumerate
  vector.filter
  vector.flat-map
  vector.foldl
  vector.foldr
  vector.each
  vector.group-by
  vector.lookup
  vector.lookup-by
  vector.map
  vector.skip
  vector.sort
  vector.sort-by
  vector.take
  vector.uniq
  vector.zip)

(import std/internal/prelude/constants
  nil
  true)
(import std/internal/prelude/util/macros
  todo)
(import std/internal/primitives
  <>
  +/2
  build-vector
  eq
  panic
  vector.length
  vector.nth
  vector.slice)

(defn vector.all (v f)
  (defn helper (i)
    (if (eq (<> i (vector.length v)) '<)
      (if (f (vector.nth v i))
        (helper (+/2 i 1))
        nil)
      true))
  (helper 0))

(defn vector.any (v f)
  (defn helper (i)
    (if (eq (<> i (vector.length v)) '<)
      (if (f (vector.nth v i))
        true
        (helper (+/2 i 1)))
      nil))
  (helper 0))

(defn vector.each (v f)
  (defn helper (i)
    (if (eq (<> i (vector.length v)) '<)
      (progn
        (f (vector.nth v i))
        (helper (+/2 i 1)))
      nil))
  (helper 0))

(defn vector.group-by (v f)
  (todo))

(defn vector.enumerate (v)
  (todo))

(defn vector.filter (v f)
  (todo))

(defn vector.flat-map (v f)
  (todo))

(defn vector.foldl (xs f x)
  (todo))

(defn vector.foldr (xs f x)
  (todo))

(defn vector.lookup-by (v f key)
  (todo))

(defn vector.lookup (v key)
  (todo))

(defn vector.map (v f)
  (build-vector (vector.length v) \(f (vector.nth v $))))

(defn vector.skip (v n)
  (todo))

(defn vector.sort-by (v f)
  (todo))

(defn vector.sort (v)
  (vector.sort-by (fn (x) x) v))

(defn vector.take (v n)
  (todo))

(defn vector.uniq (v)
  (todo))

(defn vector.zip (l r)
  (todo))
