(module std/internal/prelude/fp/list
  list.all
  list.any
  list.enumerate
  list.filter
  list.flat-map
  list.foldl
  list.foldr
  list.each
  list.group-by
  list.lookup
  list.lookup-all
  list.lookup-all-by
  list.lookup-by
  list.map
  list.skip
  list.sort
  list.sort-by
  list.take
  list.uniq
  list.zip)

(import std/internal/prelude/constants
  else
  false
  nil
  true)
(import std/internal/prelude/logic
  and
  or)
(import std/internal/prelude/util
  caar
  cadr
  cdar
  cddr
  leq
  reverse
  split-at)
(import std/internal/prelude/util/macros
  cond
  todo)
(import std/internal/prelude/util/pseudoprims
  append
  concat
  eq
  length
  list)
(import std/internal/primitives
  +/2
  -/2
  //2
  =
  <>
  car
  cdr
  cons
  cons?
  gensym
  nil?
  panic
  show-primitive)

(defn list.all (l f)
  (if (nil? l)
    true
    (if (f (car l))
      (list.all (cdr l) f)
      false)))

(defn list.any (l f)
  (if (nil? l)
    false
    (if (f (car l))
      true
      (list.any (cdr l) f))))

(defn list.each (l f)
  (if (nil? l)
    nil
    (progn
      (f (car l))
      (list.each (cdr l) f))))

;; Converts a list of values to a list of index-value conses.
(defn list.enumerate (l)
  (defn loop (l n acc)
    (if (nil? l)
      (reverse acc)
      (loop (cdr l) (+/2 n 1) (cons (cons n (car l)) acc))))
  (loop l 0 nil))

(defn list.filter (l f)
  (defn loop (l r)
    (cond
      (nil? l)    (reverse r)
      (f (car l)) (loop (cdr l) (cons (car l) r))
      else        (loop (cdr l) r)))
  (loop l nil))

(defn list.foldl (xs f x)
  (if (nil? xs)
    x
    (list.foldl (cdr xs) f (f x (car xs)))))

(defn list.foldr (xs f x)
  (if (nil? xs)
    x
    (f x (list.foldr (cdr xs) f (car xs)))))

(defn list.lookup-by (assoc f key)
  (cond
    (nil? assoc)         nil
    (f key (caar assoc)) (cdar assoc)
    else                 (list.lookup-by (cdr assoc) f key)))

(defn list.lookup (assoc key)
  (list.lookup-by assoc eq key))

(defn list.map (l f)
  (defn helper (in out)
    (if (nil? in)
      (reverse out)
      (helper (cdr in) (cons (f (car in)) out))))
  (helper l nil))

(defn list.lookup-all-by (assoc f key)
  (list.map (list.filter assoc \(f key (car $))) cdr))

(defn list.lookup-all (assoc key)
  (list.lookup-all-by assoc eq key))

(defn list.flat-map (l f)
  ; TODO: This could probably be made more efficient.
  (concat (list.map l f)))

;; Merges two list pairs of (data, sortingCriterion).
;;
;; Tail recursive.
;;
;; TODO Optimize this... Any sort of type-driven optimization (or a
;; purity-based subexpression elimination optimization pass) would
;; probably do it fine.
(defn merge (l r)
  (defn loop (l r acc)
    (cond
      (and (nil? l) (nil? r)) (reverse acc)
      (nil? l)                (loop l (cdr r) (cons (car r) acc))
      (nil? r)                (loop (cdr l) r (cons (car l) acc))
      (leq (cdar l) (cdar r)) (loop (cdr l) r (cons (car l) acc))
      else                    (loop l (cdr r) (cons (car r) acc))))
  (loop l r nil))

;; Skips n elements in a list.
(defn list.skip (l n)
  (if (= n 0)
    l
    (list.skip (cdr l) (-/2 n 1))))

;; Takes the first n elements in a list.
(defn list.take (l n)
  (defn loop (l n acc)
    (if (= n 0)
      (reverse acc)
      (loop (cdr l) (-/2 n 1) (cons (car l) acc))))
    (loop l n nil))

;; Sorts lists by the given function.
;;
;; Uses O(log n) stack space.
;;
;; TODO: Try to optimize this, possibly make it a primitive? An optimized sort
;; is probably worth it.
(defn list.sort-by (l f)
  (defn helper (lst len)
    (if (eq (<> len 2) '<)
      lst
      (progn
        (def tmp0 (//2 len 2))
        (def tmp1 (//2 (+/2 len 1) 2))
        (def tmp2 (split-at lst tmp0))
        (def left (car tmp2))
        (def right (cdr tmp2))
        (merge (helper left tmp0)
               (helper right tmp1)))))
  (def tagged (list.map l (fn (x) (cons x (f x)))))
  (list.map (helper tagged (length tagged)) car))

;; Sorts a list.
(defn list.sort (l)
  (list.sort-by l (fn (x) x)))

(defn list.group-by (l f)
  (defn loop (b as in bs)
    (if (nil? in)
      (cons (cons b as) bs)
      (progn
        (def hb (caar in))
        (def ha (cdar in))
        (def t (cdr in))
        (if (eq b hb)
          (loop b (cons ha as) t bs)
          (loop hb (list ha) t (cons (cons b as) bs))))))
  (def tagged (list.map l (fn (x) (cons (f x) x))))
  (def sorted (reverse (list.sort-by tagged car)))
  (if (nil? sorted)
    nil
    (loop (caar sorted) nil sorted nil)))

(defn list.uniq (l)
  (defn helper (l a)
    (cond
      (nil? l)
        a
      (and (cons? l)
           (cons? (cdr l))
           (eq (car l) (cadr l)))
        (helper (cdr l) a)
      else
        (helper (cdr l) (cons (car l) a))))
  (reverse (helper l nil)))

(defn list.zip (l r)
  (defn loop (l r a)
    (if (and (cons? l) (cons? r))
      (loop (cdr l) (cdr r)
        (cons (cons (car l) (car r)) a))
      a))
  (reverse (loop l r nil)))
