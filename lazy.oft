(module std/lazy
  naturals
  stream
  stream-cons
  thunk
  thunk.force)

(import std/fp/monad
  >>=
  do)
(import std/stm
  atomically
  stm
  stm.read
  stm.write
  transaction.pure)

;;; The Thunk class

(defclass thunk
  (val inner)
  (val evaled?)

  ;; Note that the function may be evaluated more than once, in the case that
  ;; the thunk is demanded in two separate threads at the same time.
  (ctor (func)
    [(stm func) (stm false)])

  (defn force ()
    (atomically (do
      (mdef e (stm.read evaled?))
      (mdef i (stm.read inner))
      (if e
        (transaction.pure i) ; i is an already-evaluated value.
        (progn ; i is a function that will return the value.
          (def val (i))
          (stm.write evaled? true)
          (stm.write inner val)
          (transaction.pure val)))))))

;;; The Stream class

(defclass stream
  (val car)
  (val cdr)

  (ctor (car cdr)
    [car (thunk cdr)])

  (defn head () car)
  (defn tail () (thunk.force cdr)))

(defmacro stream-cons (car cdr)
  `(stream ,car (fn () ,cdr)))

;;; Predefined Streams

; (def naturals (stream-cons 1 (1+ (head naturals))))
(def naturals (stream-cons 1 (1+ (head (todo)))))
