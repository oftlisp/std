(module std/internal/prelude/util
  any-shl?
  build-list
  caar
  cadr
  cdar
  cddr
  caaar
  caadr
  cadar
  caddr
  cdaar
  cdadr
  cddar
  cdddr
  caaaar
  caaadr
  caadar
  caaddr
  cadaar
  cadadr
  caddar
  cadddr
  cdaaar
  cdaadr
  cdadar
  cdaddr
  cddaar
  cddadr
  cdddar
  cddddr
  exit
  geq
  greater
  leq
  less
  make-vector
  or-default
  shl?)

(import std/internal/prelude/constants
  else
  false
  nil)
(import std/internal/prelude/util/macros
  cond)
(import std/internal/prelude/util/pseudoprims
  append
  list
  not)
(import std/internal/primitives
  -/2
  =
  apply
  build-vector
  byte<-fixnum
  byte?
  car
  cdr
  compare
  append-strings
  cons
  cons?
  exit-with
  fixnum?
  nil?
  panic
  prim-eq
  symbol<-string
  symbol?)

(defmacro cxrs-at-level (n)
  ; To avoid a circular import, we define our own map. Yes, it's dumb.
  ; Yes, I know it's not tail-recursive.
  (defn map (f l)
    (if (cons? l)
      (cons (f (car l)) (map f (cdr l)))
      nil))

  ; These functions define the transformation that adds a "level" to n.
  (defn carify (x)
    (cons (list 'car (car x)) (cons "a" (cdr x))))
  (defn cdrify (x)
    (cons (list 'cdr (car x)) (cons "d" (cdr x))))
  (defn cxrify (x)
    (list (carify x) (cdrify x)))

  ; This function transforms the body and name-inner-list into a function
  ; definition.
  (defn finish (x)
    (def body (car x))
    (def name (apply append-strings (cons "c" (cdr x))))
    (def name (symbol<-string name))
    (list 'defn name '(x) body))

  ; The main loop.
  (defn list-helper (n)
    (if (= n 0)
      (list (cons 'x (list "r")))
      (apply append (map cxrify (list-helper (-/2 n 1))))))
  (cons 'macro-progn (map finish (list-helper n))))

(cxrs-at-level 2)
(cxrs-at-level 3)
(cxrs-at-level 4)

;; Checks if a value is a list headed by any symbol.
(defn any-shl? (value)
  (if (cons? value)
    (symbol? (car value))
    false))

(defn build-list (n f)
  (defn helper (n a)
    (def a (cons (f n) a))
    (if (= n 0)
      a
      (helper (-/2 n 1) a)))
  (helper (-/2 n 1) nil))

;; Exits with the given exit code. If no exit code is given, exits with zero.
(defn exit ((n 0))
  (def code (cond
    (byte? n)   n
    (fixnum? n) (byte<-fixnum n)
    else        (panic n)))
  (exit-with code))

;; Checks if a value is greater than another.
(defn greater (a b) (prim-eq (compare a b) '>))

;; Checks if a value is less than another.
(defn less (a b) (prim-eq (compare a b) '<))

;; Checks if a value is greater than or equal to another.
(defn geq (a b) (not (less a b)))

;; Checks if a value is less than or equal to another.
(defn leq (a b) (not (greater a b)))

(defn make-vector (n)
  (build-vector n (fn (x) x)))

;; A helper, mainly for the `<-` macro.
(defn or-default (d)
  (fn (x) (if x x d)))

;; Checks if a value is a list headed by the given symbol. Honestly, this is a
;; kludge until pattern matching is implemented.
(defn shl? (value sym)
  (if (cons? value)
    (prim-eq (car value) sym)
    false))
