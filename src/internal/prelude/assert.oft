(module std/internal/prelude/assert
  assert
  assert-eq
  assert-neq
  assert-not)

(import std/internal/prelude/format
  show)
(import std/internal/prelude/quasiquote
  quasiquote)
(import std/internal/prelude/util/pseudoprims
  append
  list)
(import std/internal/primitives
  append-strings
  gensym
  panic)

(defmacro assert (condition)
  (def message (append-strings
    "Assertion failed: "
    (show condition)))
  `(unless ,condition
    (panic ,message)))

(defmacro assert-eq (left right)
  (def left-name (gensym))
  (def right-name (gensym))

  `(let (,left-name  ,left)
        (,right-name ,right)
    (unless (eq ,left-name ,right-name)
      (panic (append-strings
        "Assertion failed: (eq "
        ,(show left)
        " "
        ,(show right)
        ")\n\t"
        ,(show left)
        " = "
        (show ,left-name)
        "\n\t"
        ,(show right)
        " = "
        (show ,right-name))))))

(defmacro assert-neq (left right)
  (def left-name (gensym))
  (def right-name (gensym))

  `(let (,left-name  ,left)
        (,right-name ,right)
    (when (eq ,left-name ,right-name)
      (panic (append-strings
        "Assertion failed: (eq "
        ,(show left)
        " "
        ,(show right)
        ")\n\t"
        ,(show left)
        " = "
        (show ,left-name)
        "\n\t"
        ,(show right)
        " = "
        (show ,right-name))))))

(defmacro assert-not (condition)
  `(assert (not ,condition)))
