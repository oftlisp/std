(module std/internal/prelude/patterns
  [defpattern defpattern-quasiquote pat-none-bind pat-pair-bind pat-quasiquote-bind pat-quote-bind
   pat-some-bind pat-none-matches? pat-pair-matches? pat-quasiquote-matches? pat-quote-matches?
   pat-some-matches?]
  no-prelude)

(import std/internal/prelude/conversions
  [string->symbol symbol->string])
(import std/internal/prelude/intrinsics
  [= car cdr gensym nil? panic])
(import std/internal/prelude/macros
  [def defmacro defmacro* list matches? quasiquote unless])
(import std/internal/prelude/obj
  [append length nth])

; TODO: pat-list-matches?, pat-list-bind

(defmacro* defpattern (name args | body)
  (def bind (string->symbol (append "pat-" (symbol->string name) "-bind")))
  (def matches? (string->symbol (append "pat-" (symbol->string name) "-matches?")))
  (def pat (gensym))
  (def sym (gensym))
  (list
    `(defmacro ,matches? (,pat ,sym)
      (todo ,(list 'quote matches?)))
    `(defmacro* ,bind (,pat ,sym)
      (todo ,(list 'quote bind)))))

(defmacro defpattern-quasiquote (name args expansion)
  ; This is written perhaps more cautiously than necessary; I'm unsure enough about how I should
  ; have the semantics of nested quasiquotes and quote-in-quasiquote behave that I'm forgoing
  ; quasiquote as a whole for now.
  (def body-name (gensym))
  (list 'defpattern name args
    (list 'def body-name (list 'quasiquote expansion))
    (list 'list 'quasiquote body-name)))

(defmacro pat-quasiquote-matches? (pat sym)
  (def pat (if (= (length pat) 1)
    (car pat)
    (panic "The quasiquote pattern takes two arguments")))
  (todo 'pat-quasiquote-matches? pat))
(defmacro* pat-quasiquote-bind (pat sym)
  (def pat (if (= (length pat) 1)
    (car pat)
    (panic "The quasiquote pattern takes two arguments")))
  (todo 'pat-quasiquote-matches? pat))

(defmacro pat-quote-matches? (pat sym)
  `(equals ,sym ',pat))
(defmacro* pat-quote-bind (pat sym)
  nil)

(defmacro pat-pair-matches? (pat sym)
  (unless (= (length pat) 2)
    (panic "The pair pattern takes two arguments"))
  `(and (pair? ,sym)
        (matches? ,(nth 0 pat) (fst ,sym))
        (matches? ,(nth 1 pat) (snd ,sym))))
(defmacro* pat-pair-bind (pat sym)
  (unless (= (length pat) 2)
    (panic "The pair pattern takes two arguments"))
  (list
    `(def ,(nth 0 pat) (fst ,sym))
    `(def ,(nth 1 pat) (snd ,sym))))

(defpattern-quasiquote some (x) (some ,x))
(defpattern-quasiquote none ()  none)
