;; A regex parsing module based on Regular-expression derivatives re-examined.
(module std/parsing/regex
  accepts-empty-string?
  build-regex-matcher
  build-regex-matcher-for-ast
  derivative
  must-build-regex-matcher
  parse-regex
  regex-ast-from-string
  regex-matches?)

(import std/data/set
  set
  set.contains?
  set.flat-map)
(import std/lang/regex
  parse-regex
  simplify-regex)

(defn accepts-empty-string? (regex)
  (cond
    (or (eq regex 'empty) (shl? regex 'kleene))
      true
    (or (string? regex)
        (eq regex 'any-char)
        (eq regex 'none)
        (shl? regex 'char-set))
      false
    (or (shl? regex 'and) (shl? regex 'concat))
      (all (cdr regex) accepts-empty-string?)
    (shl? regex 'not)
      (not (accepts-empty-string? (cadr regex)))
    (shl? regex 'or)
      (any (cdr regex) accepts-empty-string?)
    else
      (panic "Invalid regex: " regex)))

(defn char-set-contains? (char from to)
  (<- char string.ord)
  (and (<= (string.ord from) char) (< char (string.ord to))))

(defn derivative (regex char)
  (<- regex simplify-regex)
  (simplify-regex (cond
    (empty? char)
      regex
    (> (length char) 1)
      (-> regex
        (derivative (head char))
        (derivative (tail char)))
    (or (eq regex 'empty) (eq regex 'none))
      'none
    (eq regex 'any-char)
      'empty
    (string? regex)
      (if (eq regex char)
        'empty
        'none)
    (shl? regex 'and)
      (cons 'and (map (cdr regex) \(derivative $ char)))
    (shl? regex 'char-set)
      (if (char-set-contains? char (cadr regex) (caddr regex))
        'empty
        'none)
    (shl? regex 'concat)
      (if (nil? (cdr regex))
        'none
        (cons 'or
          (cons `(concat ,(derivative (cadr regex) char) ,@(cddr regex))
            (if (accepts-empty-string? (cadr regex))
             (cons (derivative (cons 'concat (cddr regex)) char) nil)
             nil))))
    (shl? regex 'kleene)
      (list 'concat (derivative (cadr regex) char) regex)
    (shl? regex 'not)
      (list 'not (derivative (cadr regex) char))
    (shl? regex 'or)
      (cons 'or (map (cdr regex) \(derivative $ char)))
    else
      (panic "Invalid regex: " regex))))

;; Creates a regex AST for matching against a literal string.
(defn regex-ast-from-string (str)
  (cons 'concat (string.explode str)))

;;; High-level interface

(defn build-regex-matcher-for-ast (regex)
  \(accepts-empty-string? (derivative regex $)))

(defn build-regex-matcher (regex)
  (<- regex parse-regex)
  (if (ok? regex)
    (ok (build-regex-matcher-for-ast (cdr regex)))
    regex))

(defn must-build-regex-matcher (regex)
  (def tmp (build-regex-matcher regex))
  ((if (ok? tmp) id panic) (cdr tmp)))

(defn regex-matches? (regex string)
  ((must-build-regex-matcher regex) string))
