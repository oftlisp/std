(module std/parsing/peg/internals
  assert-expr-well-formed
  assert-production-well-formed)

(defn assert-charset-well-formed (charset)
  (cond
    (and (string? charset)
         (= (length charset) 1))
      true
    (and (cons? charset)
         (= (length charset) 2)
         (string? (car charset))
         (string? (cadr charset))
         (= (length (car charset)) 1)
         (= (length (cadr charset)) 1))
      true
    else
      (panic (concat-strings "Invalid charset item: " (show charset)))))

;; Checks if an expression in a PEG is well-formed, panicing if it is not.
(defn assert-expr-well-formed (expr nonterminal-names)
  ; TODO: This could use pattern-matching.
  (cond
    (eq expr '.)
      true
    (symbol? expr)
      (unless (contains? nonterminal-names expr)
        (panic (concat-strings "Unknown nonterminal: " (show expr))))
    (string? expr)
      true
    (shl? expr 'charset)
      (each (cdr expr) assert-charset-well-formed)
    (shl? expr 'choose)
      (for-each e (cdr expr)
        (assert-expr-well-formed e nonterminal-names))
    (vector? expr)
      (for-each e expr
        (assert-expr-well-formed e nonterminal-names))
    (or (shl? expr '*)
        (shl? expr '+)
        (shl? expr '?)
        (shl? expr 'and)
        (shl? expr 'not))
      (progn
        (unless (eq (length expr) 2)
          (panic "Invalid " (car expr) " expr: " expr))
        (assert-expr-well-formed (cadr expr) nonterminal-names))
    else
      (panic "Invalid expr: " expr)))

;; Checks if an production in a PEG is well-formed, panicing if it is not.
(defn assert-production-well-formed (prod nonterminal-names)
  (unless (symbol? (car prod))
    (panic "Production's car is not a symbol!"))
  (for-each expr (cdr prod)
    (assert-expr-well-formed expr nonterminal-names)))
