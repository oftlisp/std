;; A parser macro for parsing with parsing expression grammars. If you're
;; trying to parse a programming language, this is the module for you.
;;
;; TODO: Use packrat or tables, not this approach...
(module std/parsing/peg
  combinator-*
  combinator-+
  combinator-?
  defsyntax-peg)

(import std/parsing/peg/internals
  assert-expr-well-formed
  assert-production-well-formed)

;; Defines a parsing function. Takes the name of the function and a list of
;; productions. A parsing function returns a result. If the result is ok, it
;; contains the parse tree and the remainder of unparsed input. If the result
;; is err, it contains the parse error.
;;
;; Productions are specified as:
;;
;;   PRODUCTION ::= (PRODUCTION-NAME EXPR...)
;;   EXPR ::= . | PRODUCTION-NAME | LITERAL-STRING | (charset CHARSET...)
;;         |  (choose EXPR...) | [EXPR...]
;;         |  (* EXPR) | (+ EXPR) | (? EXPR)
;;         |  (and EXPR) | (not EXPR)
;;   CHARSET ::= CHAR | (CHAR CHAR)
;;   PRODUCTION-NAME ::= any symbol other than .
;;   LITERAL-STRING ::= any string
;;   CHAR ::= a single-character string
;;
;; If two or more productions share the same name, an implicit choose between
;; the different productions is inserted, with the (lexically) first one coming
;; first. There must be at least one production named root; this is where
;; parsing begins.
;;
;; For example, the PEG:
;;
;;   # Hierarchical syntax
;;   Grammar    <- Spacing Definition+ EndOfFile
;;   Definition <- Identifier LEFTARROW Expression
;;
;;   Expression <- Sequence (SLASH Sequence)*
;;   Sequence   <- Prefix*
;;   Prefix     <- (AND / NOT)? Suffix
;;   Suffix     <- Primary (QUESTION / STAR / PLUS)?
;;   Primary    <- Identifier !LEFTARROW
;;               / OPEN Expression CLOSE
;;               / Literal / Class / DOT
;;
;;   # Lexical syntax
;;   Identifier <- IdentStart IdentCont* Spacing
;;   IdentStart <- [a-zA-Z_]
;;   IdentCont  <- IdentStart / [0-9]
;;
;;   Literal    <- ['] (!['] Char)* ['] Spacing
;;               / ["] (!["] Char)* ["] Spacing
;;   Class      <- '[' (!']' Range)* ']' Spacing
;;   Range      <- Char '-' Char / Char
;;   Char       <- '\\' [nrt'"\[\]\\]
;;               / '\\' [0-2][0-7][0-7]
;;               / '\\' [0-7][0-7]?
;;               / !'\\' .
;;
;;   LEFTARROW  <- '<-' Spacing
;;   SLASH      <- '/' Spacing
;;   AND        <- '&' Spacing
;;   NOT        <- '!' Spacing
;;   QUESTION   <- '?' Spacing
;;   STAR       <- '*' Spacing
;;   PLUS       <- '+' Spacing
;;   OPEN       <- '(' Spacing
;;   CLOSE      <- ')' Spacing
;;   DOT        <- '.' Spacing
;;
;;   Spacing    <- (Space / Comment)*
;;   Comment    <- '#' (!EndOfLine .)* EndOfLine
;;   Space      <- ' ' / '\t' / EndOfLine
;;   EndOfLine  <- '\r\n' / '\n' / '\r'
;;   EndOfFile  <- !.
;;
;; is parsed by the parser resulting from:
;;
;;   (defsyntax-peg parse-peg
;;     ; Hierarchical syntax
;;     (root       spacing (+ definition) end-of-file)
;;     (definition identifier LEFT-ARROW expression)
;;
;;     (expression sequence (* [SLASH sequence]))
;;     (sequence   (* prefix))
;;     (prefix     (? (choose AND NOT)) suffix)
;;     (suffix     primary (? (choose QUESTION STAR PLUS)))
;;     (primary    identifier (not LEFT-ARROW))
;;     (primary    OPEN expression CLOSE)
;;     (primary    (choose literal class dot))
;;
;;     ; Lexical syntax
;;     (identifier  ident-start (* ident-cont) spacing)
;;     (ident-start (chars-from "[a-zA-Z_"))
;;     (ident-cont  (choose ident-start (charset ("0" "9"))))
;;
;;     (literal "'" (* [(not "'") char]) "'" spacing])
;;     (literal "\"" (* [(not "\"") char]) "\"" spacing)
;;     (class   "[" (* (not "]") range) "]" spacing)
;;     (range   char "-" char)
;;     (range   char)
;;     (char    "\\" (charset "n" "r" "t" "'" "\"" "[" "]" "\\"))
;;     (char    "\\" (charset ("0" "2")) (charset ("0" "9")) (charset ("0" "9")))
;;     (char    "\\" (charset ("0" "7")) (? (charset ("0" "7"))))
;;     (char    (not "\\") .)
;;
;;     (LEFT-ARROW "<-" spacing)
;;     (SLASH      "/" spacing)
;;     (AND        "&" spacing)
;;     (NOT        "!" spacing)
;;     (QUESTION   "?" spacing)
;;     (STAR       "*" spacing)
;;     (PLUS       "+" spacing)
;;     (OPEN       "(" spacing)
;;     (CLOSE      ")" spacing)
;;     (DOT        "." spacing)
;;
;;     (spacing     (* (choose space comment)))
;;     (comment     "#" (* [(not end-of-line) .]) end-of-line)
;;     (space       (choose " " "\t" end-of-line))
;;     (end-of-line (choose "\r\n" "\n" "\r"))
;;     (end-of-file (not .)))
(defmacro defsyntax-peg (name ... productions)
  (defn comb-name (n)
    (symbol<-string (append-strings "combinator-" (string<-symbol n))))
  (defn prod-fn-name (n)
    (symbol<-string (append-strings "parse-production-" (string<-symbol n))))

  (for-each prod productions
    (unless (and (cons? prod) (symbol? (car prod)))
      (panic "Invalid production: " prod)))
  (unless (any productions \(eq (car $) 'root))
    (panic "No root production"))

  (def nonterminal-names (unique (map productions car)))
  (for-each prod productions
    (assert-production-well-formed prod nonterminal-names))

  (def src (gensym))
  (defn make-charset-frag (charsets error)
    (defn charset-matches (charset)
      (cond
        (string? charset)
          `(eq (head ,src) ,charset)
        (cons? charset)
          (let (l (string.ord (car charset)))
               (h (string.ord (cadr charset)))
               (c (gensym))
            `(let1 ,c (string.ord (head ,src))
              (and (>= ,c ,l) (< ,c ,h))))
        else
          (panic (append-strings "Invalid charset item: " (show charset)))))

    (if (nil? charsets)
      error
      `(if (empty? ,src)
        ,error
        (if ,(charset-matches (car charsets))
          (ok (head ,src) (tail ,src))
          ,(make-charset-frag (cdr charsets) error)))))
  (defn make-parser-frag (name expr)
    (def error `(err (append-strings
      ,(append-strings "No match for expr " (show expr) " in production "
        (string<-symbol name) ": ")
      (show ,src))))
    (cond
      (eq expr '.)
        `(if (empty? ,src)
          ,error
          (ok (head ,src) (tail ,src)))
      (symbol? expr)
        `(,(prod-fn-name expr) ,src)
      (vector? expr)
        (if (empty? expr)
          `(ok nil ,src)
          (let (r (gensym))
               (r2 (gensym))
            `(>>= ,(make-parser-frag name (head expr))
              (fn (,r) (let1 ,src (cadr ,r)
                (>>= ,(make-parser-frag name (tail expr))
                  (fn (,r2)
                    (ok (cons (car ,r) (car ,r2)) (cadr ,r2)))))))))
      (string? expr)
        `(if (starts-with ,expr ,src)
          (ok ,expr (slice ,src ,(length expr) (length ,src)))
          ,error)
      (shl? expr 'charset)
        (make-charset-frag (cdr expr) error)
      (shl? expr 'choose)
        (let1 exprs (cdr expr)
          (if (nil? exprs)
            error
            `(either ,(make-parser-frag name (car exprs))
              ok
              \,(make-parser-frag name (cons 'choose (cdr exprs))))))
      (or (shl? expr '*)
          (shl? expr '+)
          (shl? expr '?))
        (let (comb (comb-name (car expr)))
             (func `(fn (,src) ,(make-parser-frag name (cadr expr))))
          `(,comb ,func ,src))
      (shl? expr 'and)
        `(<$> ,(make-parser-frag name (cadr expr))
          \(list (car $) ,src))
      (shl? expr 'not)
        `(either ,(make-parser-frag name (cadr expr))
          \,error
          \(ok nil ,src))
      else
        (panic "Invalid expr: " expr)))
  (defn make-prod-parser-func (nonterminal-name)
    (def name (prod-fn-name nonterminal-name))
    (def expr (cons 'choose
      (map (lookup-all productions nonterminal-name) vector<-list)))
    `(,name (,src)
      (<$> ,(make-parser-frag nonterminal-name expr)
        \(list (vector<-list (cons ',nonterminal-name (car $))) (cadr $)))))

  `(def ,name (progn
    (defnrec ,@(map nonterminal-names make-prod-parser-func))
    (defn ,name (,src)
      (,(prod-fn-name 'root) ,src))
    ,name)))

(defn combinator-* (func src)
  (defn loop (src a)
    (either (func src)
      \(loop (cadr $) (cons (car $) a))
      \(ok (reverse a) src)))
  (loop src nil))

(defn combinator-+ (func src)
  (defn loop (src a)
    (either (func src)
      \(loop (cadr $) (cons (car $) a))
      \(ok (reverse a) src)))
  (>>= (func src)
    \(loop (cadr $) (list (car $)))))

(defn combinator-? (func src)
  (either (func src)
    \(ok (cons 'just (car $)) (cadr $))
    \(ok 'none src)))
