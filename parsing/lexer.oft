;; A lexer for the `std/parsing/cfg` and `std/parsing/peg` modules.
(module std/parsing/lexer
  build-lexer
  deflexer
  lex-one
  lex-string
  lexer-loop
  preprocess-terminal)

(import std/parsing/regex
  accepts-empty-string?
  derivative
  parse-regex
  regex-ast-from-string)

;; Lexes a single item from an input string, returning a result containing the
;; a new input string and a new accumulator state.
;;
;; This function expects terminals specified as conses of regex NFAs and
;; transformer functions. A transformer function is called with the matching
;; string and the accumulator, and should return the new value of the
;; accumulator.
(defn lex-one (terminals str accum)
  (defn check-acceptance (terminals n)
    (cond
      (nil? terminals)
        nil
      (accepts-empty-string? (caar terminals))
        ((cadar terminals) (slice str 0 n) accum)
      else
        (check-acceptance (cdr terminals) n)))
  (defn next (terminals n)
    (def ch (slice str n (1+ n)))
    (-> terminals
      (map \(cons (derivative (car $) ch) (cdr $)))
      (filter \(neq (car $) 'none))))

  (def len (length str))
  (defn helper (terminals n)
    (aif (check-acceptance terminals n)
      (ok (slice str n len) $)
      (if (>= n len)
        (err (append-strings "No terminal matches input: " (show str)))
        (helper (next terminals n) (1+ n)))))

  (helper terminals 0))

;; Runs lex-one in a loop until failure or the string has been consumed.
;; Returns a result of a list of matches, specified as for build-lexer.
(defn lexer-loop (terminals str accum)
  (if (empty? str)
    (ok (reverse accum))
    (>>= (lex-one terminals str accum)
      \(if (empty? (car $))
        (ok (reverse (cadr $)))
        (lexer-loop terminals (car $) (cadr $))))))

;; Converts a terminal as accepted by build-lexer to one that would be accepted
;; by lex-one.
(defn preprocess-terminal (t)
  (cond
    (and (shl? t 'simple) (nil? (cddr t)))
      (ok (regex-ast-from-string (cadr t)) cons)
    (and (shl? t 'simple) (symbol? (caddr t)))
      (ok (regex-ast-from-string (cadr t)) (fn (x a) (cons (caddr t) a)))
    (and (shl? t 'simple) (function? (caddr t)))
      (ok (regex-ast-from-string (cadr t)) (fn (x a) (cons ((caddr t) x) a)))
    (and (shl? t 'regex) (symbol? (caddr t)))
      (<$> (parse-regex (cadr t))
        \(list $ (fn (x a) (cons (cons (caddr t) x) a))))
    (and (shl? t 'regex) (function? (caddr t)))
      (<$> (parse-regex (cadr t))
        \(list $ (fn (x a) (cons ((caddr t) x) a))))
    (and (shl? t 'ignore) (eq (cadr t) 'simple))
      (ok (regex-ast-from-string (caddr t)) (fn (_ a) a))
    (and (shl? t 'ignore) (eq (cadr t) 'regex))
      (<$> (parse-regex (caddr t))
        \(list $ (fn (_ a) a)))
    else
      (err (append-strings "Invalid terminal: " (show t)))))

;; Builds a lexer from a list of terminals, returning a result. A lexer is a
;; function that accepts a string, and returns a result for the list of
;; matches.
;;
;; Note that this does not use longest-match/maximal munch, but instead uses
;; first-matching-terminal.
;;
;; Terminals are specified as:
;;
;;   TERMINAL-LIST ::= (TERMINAL...)
;;   TERMINAL ::= (simple STRING)
;;             |  (simple STRING FUNCTION)
;;             |  (simple STRING NAME)
;;             |  (regex REGEX FUNCTION)
;;             |  (regex REGEX NAME)
;;             |  (ignore simple STRING)
;;             |  (ignore regex REGEX)
;;
;; The match for a simple terminal described only by a string or a regex
;; terminal described only by a regex is just the matching string. The match
;; for a named simple terminal is the name. The match for a named regex is the
;; name consed with the matching string. When a function is present, it is
;; called with the matching string. Ignore terminals do not create matches.
(defn build-lexer (terminals)
  (<$> (traverse terminals result.pure preprocess-terminal)
    \(fn (str) (lexer-loop $ str nil))))

;; Creates a lexer, similar to build-lexer, but defined as a function.
(defmacro deflexer (name ... terminals)
  `(def ,name (must (build-lexer ',terminals))))

;; Accepts a list of terminals and an input string, then returns a result for
;; the list of matches. See build-lexer for the specification of terminals.
(defn lex-string (terminals str)
  (def lexer (build-lexer terminals))
  (<$> (build-lexer terminals)
    \((cdr lexer) str)))
