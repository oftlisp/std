;; TODO THIS SHOULD BE GENERATED.
(module std/prelude
  *
  +
  -
  ->
  ->>
  .
  /
  /=
  <
  <-
  <=
  =
  >
  >=
  0?
  1+
  1-
  all
  and
  any-shl?
  any
  append
  apply
  assert
  assert-eq
  caaaar
  caaadr
  caaar
  caadar
  caaddr
  caadr
  caar
  cadaar
  cadadr
  cadar
  caddar
  cadddr
  caddr
  cadr
  car
  case
  cdaaar
  cdaadr
  cdaar
  cdadar
  cdaddr
  cdadr
  cdar
  cddaar
  cddadr
  cddar
  cdddar
  cddddr
  cdddr
  cddr
  cdr
  compile-time-eval
  concat
  concat-strings
  cond
  contains?
  cons
  cons?
  debug-trace
  defclass
  defmethod
  each
  else
  empty?
  enumerate
  eq
  err
  err?
  exit
  false
  filter
  foldl
  foldr
  for-each
  function?
  gensym
  geq
  get
  greater
  group-by
  head
  id
  init
  last
  length
  leq
  less
  let
  let1
  letrec
  list
  list?
  lookup
  lookup-by
  make-vector
  map
  match
  mod
  nil
  nil?
  not
  nth
  ok
  ok?
  or
  or-default
  panic
  print
  println
  put
  quasiquote
  reverse
  shl?
  show
  skip
  sort
  sort-by
  string?
  symbol?
  tail
  take
  todo
  true
  unless
  when)

(import std/internal/prelude/assert
  assert
  assert-eq)
(import std/internal/prelude/constants
  else
  false
  nil
  true)
(import std/internal/prelude/format
  show)
(import std/internal/prelude/fp
  .
  all
  any
  each
  enumerate
  filter
  foldl
  foldr
  group-by
  lookup
  lookup-by
  map
  skip
  sort
  sort-by
  take)
(import std/internal/prelude/logic
  and
  or)
(import std/internal/prelude/patterns/match
  match)
(import std/internal/prelude/math
  *
  +
  -
  /
  /=
  <
  <=
  >
  >=
  0?
  1+
  1-
  mod)
(import std/internal/prelude/objects
  defclass
  defmethod)
(import std/internal/prelude/objects/common-methods
  empty?
  head
  tail)
(import std/internal/prelude/print
  print
  println)
(import std/internal/prelude/quasiquote
  quasiquote)
(import std/internal/prelude/result
  err
  err?
  ok
  ok?)
(import std/internal/prelude/store
  get
  put)
(import std/internal/prelude/util
  any-shl?
  caar
  cadr
  cdar
  cddr
  caaar
  caadr
  cadar
  caddr
  cdaar
  cdadr
  cddar
  cdddr
  caaaar
  caaadr
  caadar
  caaddr
  cadaar
  cadadr
  caddar
  cadddr
  cdaaar
  cdaadr
  cdadar
  cdaddr
  cddaar
  cddadr
  cdddar
  cddddr
  exit
  geq
  greater
  leq
  less
  or-default
  reverse
  shl?
  split-at)
(import std/internal/prelude/util/macros
  ->
  ->>
  <-
  case
  compile-time-eval
  cond
  debug-trace
  for-each
  let
  let1
  letrec
  todo
  unless
  when)
(import std/internal/prelude/util/pseudoprims
  append
  concat
  contains?
  id
  init
  last
  length
  list
  list?
  not
  nth)
(import std/internal/primitives
  =
  apply
  car
  cdr
  concat-strings
  cons
  cons?
  eq
  function?
  gensym
  make-vector
  nil?
  panic
  string?
  symbol?)
