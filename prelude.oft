;; TODO THIS SHOULD BE GENERATED.
(module std/prelude
  *
  +
  -
  ->
  /
  0?
  1+
  1-
  <-
  =
  and
  append
  apply
  car
  cdr
  caar
  cadr
  cdar
  cddr
  caaar
  caadr
  cadar
  caddr
  cdaar
  cdadr
  cddar
  cdddr
  caaaar
  caaadr
  caadar
  caaddr
  cadaar
  cadadr
  caddar
  cadddr
  cdaaar
  cdaadr
  cdadar
  cdaddr
  cddaar
  cddadr
  cdddar
  cddddr
  concat-strings
  cond
  cons
  defclass
  defmethod
  else
  false
  filter
  foldl
  foldr
  for-each
  geq
  greater
  group-by
  id
  leq
  less
  list
  list?
  lookup
  lookup-by
  map
  mod
  nil
  nil?
  object-call-func
  object-get-data
  object-seal
  object-unseal
  or
  panic
  print
  println
  quasiquote
  reverse
  shl?
  show
  sort
  sort-by
  todo
  true
  unless
  when)

(import std/internal/prelude/constants
  else
  false
  nil
  true)
(import std/internal/prelude/format
  show)
(import std/internal/prelude/fp
  filter
  foldl
  foldr
  for-each
  group-by
  lookup
  lookup-by
  map
  sort
  sort-by)
(import std/internal/prelude/logic
  and
  or)
(import std/internal/prelude/math
  *
  +
  -
  /
  0?
  1+
  1-
  mod)
(import std/internal/prelude/objects
  defclass
  defmethod
  object-call-func)
(import std/internal/prelude/print
  print
  println)
(import std/internal/prelude/quasiquote
  quasiquote)
(import std/internal/prelude/utils
  any-shl?
  caar
  cadr
  cdar
  cddr
  caaar
  caadr
  cadar
  caddr
  cdaar
  cdadr
  cddar
  cdddr
  caaaar
  caaadr
  caadar
  caaddr
  cadaar
  cadadr
  caddar
  cadddr
  cdaaar
  cdaadr
  cdadar
  cdaddr
  cddaar
  cddadr
  cdddar
  cddddr
  geq
  greater
  leq
  less
  reverse
  shl?
  split-at)
(import std/internal/prelude/utils/macros
  ->
  <-
  cond
  todo
  unless
  when)
(import std/internal/prelude/utils/pseudoprims
  append
  id
  list
  list?)
(import std/internal/primitives
  =
  apply
  car
  cdr
  concat-strings
  cons
  nil?
  object-get-data
  object-seal
  object-unseal
  panic)
