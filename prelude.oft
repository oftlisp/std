;; TODO THIS SHOULD BE GENERATED.
(module std/prelude
  *
  +
  -
  ->
  ->>
  .
  /
  /=
  <
  <-
  <=
  =
  >
  >=
  0?
  0-
  1+
  1-
  aif
  all
  and
  any-shl?
  any
  append
  apply
  assert
  assert-eq
  bitand
  bitnot
  bitor
  bitxor
  build-list
  build-vector
  caaaar
  caaadr
  caaar
  caadar
  caaddr
  caadr
  caar
  cadaar
  cadadr
  cadar
  caddar
  cadddr
  caddr
  cadr
  car
  case
  cdaaar
  cdaadr
  cdaar
  cdadar
  cdaddr
  cdadr
  cdar
  cddaar
  cddadr
  cddar
  cdddar
  cddddr
  cdddr
  cddr
  cdr
  compile-time-eval
  concat
  concat-strings
  cond
  contains?
  cons
  cons?
  debug-trace
  defclass
  defcurried
  definit
  defmethod
  display
  displayln
  each
  else
  empty?
  ends-with
  enumerate
  eq
  err
  err?
  exit
  explode
  false
  filter
  flat-map
  foldl
  foldr
  for-each
  function?
  gensym
  geq
  greater
  group-by
  head
  id
  init
  join
  last
  length
  leq
  less
  let
  let1
  letrec
  list
  list?
  list<-vector
  lookup
  lookup-all
  lookup-all-by
  lookup-by
  make-vector
  map
  match
  mod
  must
  neq
  nil
  nil?
  not
  nth
  object?
  object-cons
  object-get-method
  object-has-method?
  object-put-method
  object-type
  object-value
  ok
  ok?
  or
  or-default
  panic
  print
  println
  quasiquote
  result.ap ; TODO This should probably be removed once get/put work.
  result.bind ; TODO This should probably be removed once get/put work.
  result.fmap ; TODO This should probably be removed once get/put work.
  result.pure ; TODO This should probably be removed once get/put work.
  reverse
  shl?
  show
  skip
  slice
  sort
  sort-by
  starts-with
  string?
  string<-symbol
  string.ord
  symbol?
  symbol<-string
  tail
  take
  todo
  true
  uniq
  unique
  unless
  unwind-protect
  vector
  vector?
  vector<-list
  when
  zip)

(import std/internal/prelude/assert
  assert
  assert-eq)
(import std/internal/prelude/constants
  else
  false
  nil
  true)
(import std/internal/prelude/format
  show)
(import std/internal/prelude/fp
  .
  all
  any
  defcurried
  enumerate
  filter
  flat-map
  foldl
  foldr
  each
  group-by
  lookup
  lookup-all
  lookup-all-by
  lookup-by
  map
  skip
  sort
  sort-by
  take
  uniq
  unique
  zip)
(import std/internal/prelude/logic
  and
  or)
(import std/internal/prelude/patterns/match
  match)
(import std/internal/prelude/math
  *
  +
  -
  /
  /=
  <
  <=
  >
  >=
  0?
  0-
  1+
  1-
  bitand
  bitor
  bitxor
  mod)
(import std/internal/prelude/objects
  defclass
  defmethod)
(import std/internal/prelude/objects/common-methods
  empty?
  head
  slice
  tail)
(import std/internal/prelude/objects/methods
  object-get-method
  object-has-method?
  object-put-method)
(import std/internal/prelude/print
  display
  displayln
  print
  println)
(import std/internal/prelude/quasiquote
  quasiquote)
(import std/internal/prelude/result
  err
  err?
  must
  ok
  ok?
  result.ap
  result.bind
  result.fmap
  result.pure)
(import std/internal/prelude/strings
  ends-with
  explode
  join
  starts-with)
(import std/internal/prelude/util
  any-shl?
  build-list
  caar
  cadr
  cdar
  cddr
  caaar
  caadr
  cadar
  caddr
  cdaar
  cdadr
  cddar
  cdddr
  caaaar
  caaadr
  caadar
  caaddr
  cadaar
  cadadr
  caddar
  cadddr
  cdaaar
  cdaadr
  cdadar
  cdaddr
  cddaar
  cddadr
  cdddar
  cddddr
  exit
  geq
  greater
  leq
  less
  make-vector
  or-default
  reverse
  shl?
  split-at)
(import std/internal/prelude/util/macros
  ->
  ->>
  <-
  aif
  case
  compile-time-eval
  cond
  debug-trace
  definit
  for-each
  let
  let1
  letrec
  todo
  unless
  when)
(import std/internal/prelude/util/pseudoprims
  append
  concat
  contains?
  id
  init
  last
  length
  list
  list?
  neq
  not
  nth
  vector)
(import std/internal/primitives
  =
  apply
  bitnot
  build-vector
  car
  cdr
  concat-strings
  cons
  cons?
  eq
  function?
  gensym
  list<-vector
  nil?
  object?
  object-cons
  object-type
  object-value
  panic
  string?
  string<-symbol
  string.ord
  symbol?
  symbol<-string
  unwind-protect
  vector?
  vector<-list)
