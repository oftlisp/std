(module std/fp/lazy
  naturals
  stream
  stream?
  stream.head
  stream.tail
  stream-cons
  thunk
  thunk?
  thunk.force)

(import std/sync/mutex
  mutex
  mutex.lock
  mutex.unlock
  mutex-var.read
  mutex-var.write)

;;; The Thunk class.
;;;
;;; TODO: Use std/sync/stm instead of std/sync/mutex.
(defclass thunk
  (val inner)

  ;; Note that the function may be evaluated more than once, in the case that
  ;; the thunk is demanded in two separate threads at the same time.
  ;;
  ;; XXX: This isn't actually true with the current implementation.
  (ctor (func)
    (list (mutex (cons false func))))

  (defn force ()
    (def inner-lock (mutex.lock inner))
    (def inner-val (mutex-var.read inner-lock))
    (def result (if (car inner-val)
      (cdr inner-val)
      (progn
        (def value ((cdr inner-val)))
        (mutex-var.write inner-lock (cons true value))
        value)))
    (mutex.unlock inner)
    result))

;;; The Stream class

(defclass stream
  (val h)
  (val t)

  (ctor (h t)
    (list h (thunk t)))

  (defn head () h)
  (defn tail () (thunk.force t)))

(defmacro stream-cons (h t)
  `(stream ,h (fn () ,t)))

;;; Predefined Streams

(defn nats-from (n)
  (stream-cons n (nats-from (1+ n))))

(def naturals (nats-from 0))
